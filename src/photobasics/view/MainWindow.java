package photobasics.view;

import java.awt.Color;
import java.awt.Graphics;
import java.awt.image.BufferedImage;
import java.awt.image.RescaleOp;
import java.awt.image.WritableRaster;
import java.io.File;
import java.io.FileInputStream;
import java.io.FileNotFoundException;
import java.io.FileOutputStream;
import java.io.IOException;
import java.io.ObjectInputStream;
import java.io.ObjectOutputStream;
import java.util.ArrayList;
import java.util.Enumeration;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.imageio.ImageIO;
import javax.swing.AbstractButton;
import javax.swing.ImageIcon;
import javax.swing.JFileChooser;
import javax.swing.JLabel;
import javax.swing.JOptionPane;
import javax.swing.JTextField;

/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
/**
 *
 * @author TK
 */
public class MainWindow extends javax.swing.JFrame {

    private BufferedImage originalImage;
    private BufferedImage currentImage;
    private ArrayList<BufferedImage> imageArray;

    /**
     * Creates new form MainWindow
     */
    public MainWindow() {
        imageArray = new ArrayList<>();
        initComponents();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        buttonGroup1 = new javax.swing.ButtonGroup();
        jLabel1 = new javax.swing.JLabel();
        jButton1 = new javax.swing.JButton();
        photoPanel = new javax.swing.JPanel();
        photoLabel = new javax.swing.JLabel();
        jLabel2 = new javax.swing.JLabel();
        nameLabel = new javax.swing.JLabel();
        jLabel4 = new javax.swing.JLabel();
        sizeLabel = new javax.swing.JLabel();
        photoPanel1 = new javax.swing.JPanel();
        photoLabel1 = new javax.swing.JLabel();
        jPanel1 = new javax.swing.JPanel();
        jSlider1 = new javax.swing.JSlider();
        jLabel3 = new javax.swing.JLabel();
        undoBtn = new javax.swing.JButton();
        redoBtn = new javax.swing.JButton();
        grayscaleBtn = new javax.swing.JButton();
        transposeBtn = new javax.swing.JButton();
        transposeBtn1 = new javax.swing.JButton();
        jLabel5 = new javax.swing.JLabel();
        jSeparator1 = new javax.swing.JSeparator();
        jSeparator2 = new javax.swing.JSeparator();
        xVal = new javax.swing.JTextField();
        jLabel6 = new javax.swing.JLabel();
        yVal = new javax.swing.JTextField();
        jLabel7 = new javax.swing.JLabel();
        jLabel8 = new javax.swing.JLabel();
        heightVal = new javax.swing.JTextField();
        widthVal = new javax.swing.JTextField();
        jLabel9 = new javax.swing.JLabel();
        cropBtn = new javax.swing.JButton();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);

        jLabel1.setFont(new java.awt.Font("Tahoma", 0, 18)); // NOI18N
        jLabel1.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        jLabel1.setText("Photo Basics");

        jButton1.setText("Add Photo");
        jButton1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton1ActionPerformed(evt);
            }
        });

        photoLabel.setBorder(new javax.swing.border.SoftBevelBorder(javax.swing.border.BevelBorder.RAISED));
        photoLabel.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                photoLabelMouseClicked(evt);
            }
        });

        javax.swing.GroupLayout photoPanelLayout = new javax.swing.GroupLayout(photoPanel);
        photoPanel.setLayout(photoPanelLayout);
        photoPanelLayout.setHorizontalGroup(
            photoPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(photoLabel, javax.swing.GroupLayout.DEFAULT_SIZE, 378, Short.MAX_VALUE)
        );
        photoPanelLayout.setVerticalGroup(
            photoPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(photoLabel, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
        );

        jLabel2.setText("Name :");

        jLabel4.setText("Size :");

        photoLabel1.setBorder(new javax.swing.border.SoftBevelBorder(javax.swing.border.BevelBorder.RAISED));
        photoLabel1.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                photoLabel1MouseClicked(evt);
            }
        });

        javax.swing.GroupLayout photoPanel1Layout = new javax.swing.GroupLayout(photoPanel1);
        photoPanel1.setLayout(photoPanel1Layout);
        photoPanel1Layout.setHorizontalGroup(
            photoPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(photoLabel1, javax.swing.GroupLayout.DEFAULT_SIZE, 378, Short.MAX_VALUE)
        );
        photoPanel1Layout.setVerticalGroup(
            photoPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(photoLabel1, javax.swing.GroupLayout.DEFAULT_SIZE, 343, Short.MAX_VALUE)
        );

        jSlider1.setValue(50);
        jSlider1.addChangeListener(new javax.swing.event.ChangeListener() {
            public void stateChanged(javax.swing.event.ChangeEvent evt) {
                jSlider1StateChanged(evt);
            }
        });

        jLabel3.setText("Contrast :");

        undoBtn.setText("<  Undo");
        undoBtn.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                undoBtnActionPerformed(evt);
            }
        });

        redoBtn.setText("Redo  >");
        redoBtn.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                redoBtnActionPerformed(evt);
            }
        });

        grayscaleBtn.setText("GrayScale");
        grayscaleBtn.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                grayscaleBtnActionPerformed(evt);
            }
        });

        transposeBtn.setText("Transpose");
        transposeBtn.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                transposeBtnActionPerformed(evt);
            }
        });

        transposeBtn1.setText("Vertical Flip");
        transposeBtn1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                transposeBtn1ActionPerformed(evt);
            }
        });

        jLabel5.setText("Crop :");

        xVal.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                xValActionPerformed(evt);
            }
        });

        jLabel6.setText("Start X :");

        yVal.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                yValActionPerformed(evt);
            }
        });

        jLabel7.setText("Start Y :");

        jLabel8.setText("Height :");

        heightVal.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                heightValActionPerformed(evt);
            }
        });

        widthVal.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                widthValActionPerformed(evt);
            }
        });

        jLabel9.setText("Width :");

        cropBtn.setText("Crop");
        cropBtn.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                cropBtnActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout jPanel1Layout = new javax.swing.GroupLayout(jPanel1);
        jPanel1.setLayout(jPanel1Layout);
        jPanel1Layout.setHorizontalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jSlider1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(jPanel1Layout.createSequentialGroup()
                                .addComponent(grayscaleBtn)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(transposeBtn)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(transposeBtn1))
                            .addComponent(jLabel5))
                        .addGap(0, 0, Short.MAX_VALUE))
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jSeparator1)
                            .addGroup(jPanel1Layout.createSequentialGroup()
                                .addComponent(jLabel3)
                                .addGap(0, 214, Short.MAX_VALUE))
                            .addGroup(jPanel1Layout.createSequentialGroup()
                                .addComponent(undoBtn, javax.swing.GroupLayout.PREFERRED_SIZE, 121, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addGap(18, 18, 18)
                                .addComponent(redoBtn, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                            .addGroup(jPanel1Layout.createSequentialGroup()
                                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel1Layout.createSequentialGroup()
                                        .addComponent(jLabel6)
                                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED))
                                    .addGroup(jPanel1Layout.createSequentialGroup()
                                        .addComponent(jLabel9)
                                        .addGap(15, 15, 15)))
                                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                                    .addComponent(xVal, javax.swing.GroupLayout.DEFAULT_SIZE, 80, Short.MAX_VALUE)
                                    .addComponent(widthVal))
                                .addGap(10, 10, 10)
                                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addComponent(jLabel7)
                                    .addComponent(jLabel8))
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addComponent(yVal)
                                    .addComponent(heightVal))))
                        .addContainerGap())))
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel1Layout.createSequentialGroup()
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addComponent(cropBtn)
                .addContainerGap())
            .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                .addGroup(jPanel1Layout.createSequentialGroup()
                    .addContainerGap()
                    .addComponent(jSeparator2)
                    .addContainerGap()))
        );
        jPanel1Layout.setVerticalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addGap(18, 18, 18)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(undoBtn)
                    .addComponent(redoBtn))
                .addGap(17, 17, 17)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(grayscaleBtn)
                    .addComponent(transposeBtn)
                    .addComponent(transposeBtn1))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jSeparator1, javax.swing.GroupLayout.PREFERRED_SIZE, 10, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jLabel5)
                .addGap(3, 3, 3)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(xVal, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel6)
                    .addComponent(yVal, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel7))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(widthVal, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel9)
                    .addComponent(heightVal, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel8))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(cropBtn)
                .addGap(14, 14, 14)
                .addComponent(jLabel3)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jSlider1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(20, Short.MAX_VALUE))
            .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                .addGroup(jPanel1Layout.createSequentialGroup()
                    .addGap(48, 48, 48)
                    .addComponent(jSeparator2, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addContainerGap(293, Short.MAX_VALUE)))
        );

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jLabel1, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addGroup(layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING, false)
                                .addGroup(javax.swing.GroupLayout.Alignment.LEADING, layout.createSequentialGroup()
                                    .addComponent(jLabel4)
                                    .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                    .addComponent(sizeLabel, javax.swing.GroupLayout.PREFERRED_SIZE, 220, javax.swing.GroupLayout.PREFERRED_SIZE))
                                .addGroup(javax.swing.GroupLayout.Alignment.LEADING, layout.createSequentialGroup()
                                    .addComponent(jLabel2)
                                    .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                    .addComponent(nameLabel, javax.swing.GroupLayout.PREFERRED_SIZE, 220, javax.swing.GroupLayout.PREFERRED_SIZE)))
                            .addComponent(jButton1)
                            .addGroup(layout.createSequentialGroup()
                                .addComponent(photoPanel, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                                .addComponent(photoPanel1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)))
                        .addGap(10, 10, 10)
                        .addComponent(jPanel1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)))
                .addContainerGap())
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jLabel1, javax.swing.GroupLayout.PREFERRED_SIZE, 34, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addComponent(jButton1)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addComponent(jPanel1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(photoPanel1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(photoPanel, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addGap(37, 37, 37)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(nameLabel, javax.swing.GroupLayout.PREFERRED_SIZE, 14, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel2))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(sizeLabel, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.PREFERRED_SIZE, 14, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel4))
                .addGap(28, 28, 28))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void jButton1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton1ActionPerformed
        JFileChooser fc = new JFileChooser();
        int returnVal = fc.showOpenDialog(this); //Where frame is the parent component

        File file = null;
        if (returnVal == JFileChooser.APPROVE_OPTION) {
            file = fc.getSelectedFile();
            try {
                photoLabel.setIcon(new ImageIcon(new ImageIcon(ImageIO.read(file)).getImage().getScaledInstance(photoLabel.getWidth()-10, photoLabel.getHeight()-10, 1)));
                originalImage = ImageIO.read(file);
                currentImage = originalImage;
                imageArray.add(originalImage);
            } catch (IOException e) {
                e.printStackTrace();
            }
            System.out.println(file.getAbsoluteFile());
            nameLabel.setText(file.getName());
            //JLabel imgLabel = new JLabel(file.getAbsolutePath());
            // photoPanel.add(imgLabel);
            photoPanel.revalidate();
            photoPanel.repaint();

            //Now you have your file to do whatever you want to do
        } else {
            //User did not choose a valid file
        }
    }//GEN-LAST:event_jButton1ActionPerformed

//    public static BufferedImage getImageFromArray(int[] pixels, int width, int height) {
//        BufferedImage image = new BufferedImage(width, height,     BufferedImage.TYPE_INT_ARGB);
//        WritableRaster raster = (WritableRaster) image.getData();
//        raster.setPixels(0,0,width,height,pixels);
//        image.setData(raster); 
//        return image;
//    }
    private void photoLabelMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_photoLabelMouseClicked
//        if (!"null".equals(getSelectedBtn())) {
//            System.out.println(getSelectedBtn());
//            if (preX != 0) {
//                double distance = Math.hypot(preX - evt.getX(), preY - evt.getY());
//                System.out.println(distance);
//                getField(getSelectedBtn().toLowerCase()).setText(distance + "");
//                preX = 0;
//                preY = 0;
//            } else {
//                preX = evt.getX();
//                preY = evt.getY();
//            }
//        }

    }//GEN-LAST:event_photoLabelMouseClicked

    private void photoLabel1MouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_photoLabel1MouseClicked
        // TODO add your handling code here:
    }//GEN-LAST:event_photoLabel1MouseClicked

    private void undo() {
        if (imageArray.indexOf(currentImage) > 0) {
            currentImage = imageArray.get(imageArray.indexOf(currentImage) - 1);
            photoLabel1.setIcon(new ImageIcon(new ImageIcon(currentImage).getImage().getScaledInstance(photoLabel1.getWidth()-10, photoLabel1.getHeight()-10, 1)));
            photoPanel.revalidate();
            photoLabel1.repaint();
        }

    }

    private void redo() {
        if (imageArray.indexOf(currentImage) < imageArray.size() - 1) {
            currentImage = imageArray.get(imageArray.indexOf(currentImage) + 1);
            photoLabel1.setIcon(new ImageIcon(new ImageIcon(currentImage).getImage().getScaledInstance(photoLabel1.getWidth()-10, photoLabel1.getHeight()-10, 1)));
            photoPanel.revalidate();
            photoLabel1.repaint();
        }

    }
    private void jSlider1StateChanged(javax.swing.event.ChangeEvent evt) {//GEN-FIRST:event_jSlider1StateChanged
        float factor = 0;
        float contrast_val = jSlider1.getValue();
        if (contrast_val - 50 > 0) {
            float diff = contrast_val - 50;
            factor = (diff + 100) / 100;
//            System.out.println("upper");

        } else if (contrast_val - 50 < 0) {
            float diff = 50 - contrast_val;
            factor = (100 - diff) / 100;
        }
//        System.out.println("method"+contrast_val);
        if (factor != 0) {
            currentImage = contrast(currentImage, factor);
            imageArray.add(currentImage);
            photoLabel1.setIcon(new ImageIcon(new ImageIcon(currentImage).getImage().getScaledInstance(photoLabel1.getWidth() - 10, photoLabel1.getHeight() - 10, 1)));
//            photoPanel.revalidate();
//            photoLabel1.repaint();
        }
    }//GEN-LAST:event_jSlider1StateChanged

    private void undoBtnActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_undoBtnActionPerformed
        undo();        // TODO add your handling code here:
    }//GEN-LAST:event_undoBtnActionPerformed

    private void redoBtnActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_redoBtnActionPerformed
        redo();        // TODO add your handling code here:
    }//GEN-LAST:event_redoBtnActionPerformed

    private void transposeBtnActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_transposeBtnActionPerformed
        currentImage = transpose(currentImage, jSlider1.getValue());
        imageArray.add(currentImage);
        photoLabel1.setIcon(new ImageIcon(new ImageIcon(currentImage).getImage().getScaledInstance(photoLabel1.getWidth()-10, photoLabel1.getHeight()-10, 1)));
        photoPanel.revalidate();
        photoLabel1.repaint();        // TODO add your handling code here:
    }//GEN-LAST:event_transposeBtnActionPerformed

    private void grayscaleBtnActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_grayscaleBtnActionPerformed
        currentImage = grayScale(currentImage);
        imageArray.add(currentImage);
        photoLabel1.setIcon(new ImageIcon(new ImageIcon(currentImage).getImage().getScaledInstance(photoLabel1.getWidth()-10, photoLabel1.getHeight()-10, 1)));
        photoPanel.revalidate();
        photoLabel1.repaint();        // TODO add your handling code here:
    }//GEN-LAST:event_grayscaleBtnActionPerformed

    private void transposeBtn1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_transposeBtn1ActionPerformed
        currentImage = verticalFlip(currentImage);
        imageArray.add(currentImage);
        photoLabel1.setIcon(new ImageIcon(new ImageIcon(currentImage).getImage().getScaledInstance(photoLabel1.getWidth() - 10, photoLabel1.getHeight() - 10, 1)));
        photoPanel.revalidate();
        photoLabel1.repaint();
    }//GEN-LAST:event_transposeBtn1ActionPerformed

    private void xValActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_xValActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_xValActionPerformed

    private void yValActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_yValActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_yValActionPerformed

    private void heightValActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_heightValActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_heightValActionPerformed

    private void widthValActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_widthValActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_widthValActionPerformed

    private void cropBtnActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_cropBtnActionPerformed
        currentImage = crop(currentImage, Integer.parseInt(xVal.getText()), Integer.parseInt(yVal.getText()), Integer.parseInt(widthVal.getText()), Integer.parseInt(heightVal.getText()));
        imageArray.add(currentImage);
        photoLabel1.setIcon(new ImageIcon(new ImageIcon(currentImage).getImage().getScaledInstance(photoLabel1.getWidth()-10, photoLabel1.getHeight()-10, 1)));
        photoPanel.revalidate();
        photoLabel1.repaint();
    }//GEN-LAST:event_cropBtnActionPerformed

//    private ArrayList<User> getUsers(){
//        ArrayList<User> users=null;
//        try{
//            FileInputStream fis = new FileInputStream("users.ser");
//        ObjectInputStream ois = new ObjectInputStream(fis);
//        users= (ArrayList<User>) ois.readObject();
//        ois.close();
//        //Student[] studentsFromSavedFile = (Student[]) ois.readObject();
//        
//        }catch (FileNotFoundException ex) {
//            //Logger.getLogger(MainWindow.class.getName()).log(Level.SEVERE, null, ex);
//        } catch (IOException ex) {
//           // Logger.getLogger(MainWindow.class.getName()).log(Level.SEVERE, null, ex);
//        } catch (ClassNotFoundException ex) {
//           // Logger.getLogger(MainWindow.class.getName()).log(Level.SEVERE, null, ex);
//        }
//        return users;
//    }
//    
//    private void saveUser(ArrayList<User> users){
//        FileOutputStream fos = null;
//        try {
//            fos = new FileOutputStream("users.ser");
//            ObjectOutputStream oos = new ObjectOutputStream(fos);
//            oos.writeObject(users);
//            oos.close();
//        } catch (FileNotFoundException ex) {
//            Logger.getLogger(MainWindow.class.getName()).log(Level.SEVERE, null, ex);
//        } catch (IOException ex) {
//            Logger.getLogger(MainWindow.class.getName()).log(Level.SEVERE, null, ex);
//        } finally {
//            try {
//                fos.close();
//            } catch (IOException ex) {
//                Logger.getLogger(MainWindow.class.getName()).log(Level.SEVERE, null, ex);
//            }
//        }
//    }
//    private String authenticateUser(User user, ArrayList<User> users){
//        String userList="";
//        for (User user1 : users) {
//            double thumbRatio=user.getThumb()/user1.getThumb();
//            double indexRatio=user.getIndex()/user1.getIndex();
//            double middleRatio=user.getMiddle()/user1.getMiddle();
//            double ringRatio=user.getRing()/user1.getRing();
//            double pinkyRatio=user.getPinky()/user1.getPinky();
//            
//            double totalThumbratio= (thumbRatio/indexRatio)+(thumbRatio/middleRatio)+(thumbRatio/ringRatio)+(thumbRatio/pinkyRatio);
//            double totalindexratio= (thumbRatio/indexRatio)+(indexRatio/middleRatio)+(indexRatio/ringRatio)+(indexRatio/pinkyRatio);
//            double totalmiddleratio= (middleRatio/thumbRatio)+(middleRatio/indexRatio)+(middleRatio/ringRatio)+(middleRatio/pinkyRatio);
//            double totalringratio= (ringRatio/indexRatio)+(ringRatio/middleRatio)+(ringRatio/thumbRatio)+(ringRatio/pinkyRatio);
//            double totalpinkyratio= (pinkyRatio/indexRatio)+(pinkyRatio/middleRatio)+(pinkyRatio/thumbRatio)+(pinkyRatio/ringRatio);
//            System.out.println(totalThumbratio+" "+totalindexratio+" "+totalmiddleratio+" "+totalpinkyratio+" "+totalringratio);
//            
//            double ratio=(totalThumbratio+totalindexratio+totalmiddleratio+totalpinkyratio+totalringratio)/20; 
//            System.out.println(ratio);
//            if (ratio>0.98 && ratio< 1.02){
//                //userList+=" "+user1.getName();
//                return "User : "+user1.getName();
//                
//                //JOptionPane.showMessageDialog(this, "User : "+user1.getName());
//            }
//       }
//       // return userList;
//        return "Authentication fail";
//        
//        
//    }
//    private JTextField getField(String name) {
//        switch (name) {
//            case "thumb":
//                return thumbText;
//            case "middle finger":
//                return middleText;
//            case "index finger":
//                return indexText;
//            case "ring finger":
//                return ringText;
//            case "pinky":
//                return pinkyText;
//        }
//        return null;
//    }
    private String getSelectedBtn() {
        for (Enumeration<AbstractButton> buttons = buttonGroup1.getElements(); buttons.hasMoreElements();) {
            AbstractButton button = buttons.nextElement();

            if (button.isSelected()) {
                return button.getText();
            }
        }
        return "null";
    }

    public static BufferedImage copyImage(BufferedImage source) {
        BufferedImage b = new BufferedImage(source.getWidth(), source.getHeight(), source.getType());
        Graphics g = b.getGraphics();
        g.drawImage(source, 0, 0, null);
        g.dispose();
        return b;
    }

    private BufferedImage grayScale(BufferedImage bimage) {
        BufferedImage image = copyImage(bimage);
        int width = image.getWidth();
        int height = image.getHeight();
        for (int i = 0; i < height; i++) {

            for (int j = 0; j < width; j++) {
                Color c = new Color(image.getRGB(j, i));
                int red = (int) (c.getRed() * 0.299);
                int green = (int) (c.getGreen() * 0.587);
                int blue = (int) (c.getBlue() * 0.114);
                Color newColor = new Color(red + green + blue,
                        red + green + blue, red + green + blue);
                image.setRGB(j, i, newColor.getRGB());
            }

        }
        return image;
    }

    private BufferedImage transpose(BufferedImage image, int val) {
        int width = image.getWidth();
        int height = image.getHeight();

        BufferedImage result = new BufferedImage(height, width, BufferedImage.TYPE_INT_RGB);
        WritableRaster raster = result.getRaster();
        //System.out.println("orig"+image.toString()+"current"+result.toString());
        for (int i = 0; i < height; i++) {
            for (int j = 0; j < width; j++) {
                Color c = new Color(image.getRGB(j, i));
                raster.setSample(i, j, 0, c.getRed());
                raster.setSample(i, j, 1, c.getGreen());
                raster.setSample(i, j, 2, c.getBlue());

            }
        }

        return result;
    }

    private BufferedImage verticalFlip(BufferedImage image) {
        int width = image.getWidth();
        int height = image.getHeight();

        BufferedImage result = new BufferedImage(width, height, BufferedImage.TYPE_INT_RGB);
        WritableRaster raster = result.getRaster();
        //System.out.println("orig"+image.toString()+"current"+result.toString());
        for (int i = 0; i < height; i++) {
            for (int j = 0; j < width; j++) {
                Color c = new Color(image.getRGB(j, i));
                raster.setSample(width - 1 - j, i, 0, c.getRed());
                raster.setSample(width - 1 - j, i, 1, c.getGreen());
                raster.setSample(width - 1 - j, i, 2, c.getBlue());

            }
        }

        return result;
    }

    private BufferedImage crop(BufferedImage image, int x, int y, int width, int height) {
        BufferedImage result = image.getSubimage(x, y, width, height);
        return result;
    }

    private BufferedImage contrast(BufferedImage image, float val) {
        float brightenFactor = val;
        RescaleOp op = new RescaleOp(brightenFactor, 0, null);
        BufferedImage result = op.filter(image, image);
        return result;
    }

//    public void alterImage() throws IOException {
//        
//        brightness = rand.nextInt(150 + 200 + 1) - 200; //values from 150 to 200
//        contrast = 1.5 + (5.0 - 1.5) * rand.nextDouble(); //values from 1.5 to 5.0
//
//        for (int i = 0; i < imageOriginal.getWidth(); i++) {
//            for (int j = 0; j < imageOriginal.getHeight(); j++) {
//                Color c = new Color(imageOriginal.getRGB(i, j));
//                int red = (int) contrast * c.getRed() + brightness;
//                int green = (int) contrast * c.getGreen() + brightness;
//                int blue = (int) contrast * c.getBlue() + brightness;
//
//                if (red > 255) { // the values of the color components must be between 0-255
//                    red = 255;
//                } else if (red < 0) {
//                    red = 0;
//                }
//                if (green > 255) {
//                    green = 255;
//                } else if (green < 0) {
//                    green = 0;
//                }
//                if (blue > 255) {
//                    blue = 255;
//                } else if (blue < 0) {
//                    blue = 0;
//                }
//                imageAltered.setRGB(i, j, new Color(red, green, blue).getRGB());
//            }
//        }
//    }
    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(MainWindow.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(MainWindow.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(MainWindow.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(MainWindow.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new MainWindow().setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.ButtonGroup buttonGroup1;
    private javax.swing.JButton cropBtn;
    private javax.swing.JButton grayscaleBtn;
    private javax.swing.JTextField heightVal;
    private javax.swing.JButton jButton1;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JLabel jLabel5;
    private javax.swing.JLabel jLabel6;
    private javax.swing.JLabel jLabel7;
    private javax.swing.JLabel jLabel8;
    private javax.swing.JLabel jLabel9;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JSeparator jSeparator1;
    private javax.swing.JSeparator jSeparator2;
    private javax.swing.JSlider jSlider1;
    private javax.swing.JLabel nameLabel;
    private javax.swing.JLabel photoLabel;
    private javax.swing.JLabel photoLabel1;
    private javax.swing.JPanel photoPanel;
    private javax.swing.JPanel photoPanel1;
    private javax.swing.JButton redoBtn;
    private javax.swing.JLabel sizeLabel;
    private javax.swing.JButton transposeBtn;
    private javax.swing.JButton transposeBtn1;
    private javax.swing.JButton undoBtn;
    private javax.swing.JTextField widthVal;
    private javax.swing.JTextField xVal;
    private javax.swing.JTextField yVal;
    // End of variables declaration//GEN-END:variables
}
